from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from utilities.states import SpendMoney
from keybords.client_kbrd import get_main_keyboard, cancel_keyboard, names_keyboard, confirm_keyboard
from handlers.client.utils import get_author_name
from filters.chat_type import PrivateChatFilter
from handlers.client.utils import save_transaction_to_db, save_history_db
from create_bot import bot


allowed_names = ["–ê–Ω—Ç–æ–Ω", "–ê–Ω–¥—Ä–µ–π", "–ê–Ω–¥—Ä–±–∞–π", "–í–ª–∞–¥–∏"]


async def cancel_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–æ–¥ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω", reply_markup=get_main_keyboard())
    await state.finish()


async def spend_money(message: types.Message, state: FSMContext):
    keyboard = cancel_keyboard()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É:", reply_markup=keyboard)
    await state.set_state(SpendMoney.amount.state)


async def amount_of_money(message: types.Message, state: FSMContext):
    try:
        amount = round(float(message.text), 2)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>20.55</b>", parse_mode=types.ParseMode.HTML)
        return
    await state.update_data(amount=amount)

    await state.set_state(SpendMoney.people.state)
    # TODO add list generator
    answer = "–ù–∞ –∫–æ–≥–æ –¥–µ–ª–∏–º? –í—ã–±–µ—Ä–∏ –ø–æ-–æ–¥–Ω–æ–º—É –∏–ª–∏ –≤—Å–µ—Ö —Å—Ä–∞–∑—É.\n"
    author_name = get_author_name(message.from_user.username)
    await message.answer(answer, reply_markup=names_keyboard(author_name))


async def share_money_spend(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    author_name = get_author_name(message.from_user.username)
    if user_data.get('people') is None:
        await state.update_data(people=[author_name])

    if message.text == "üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ –ù–∞ –≤—Å–µ—Ö":
        await state.update_data(people=allowed_names.copy())
        await message.answer(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–≤—Å–µ—Ö</b>. –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É?",
            parse_mode=types.ParseMode.HTML,
            reply_markup=names_keyboard(author_name)
        )

    elif message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å":
        await state.update_data(people=[author_name])
        await message.answer(
            "–°–ø–∏—Å–æ–∫ <b>–ø—É—Å—Ç</b>. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode=types.ParseMode.HTML,
            reply_markup=names_keyboard(author_name)
        )

    elif message.text == "‚è≠Ô∏è –î–∞–ª–µ–µ":
        user_data = await state.get_data()
        people = user_data.get('people')
        if people is None:
            await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        await state.set_state(SpendMoney.comment.state)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.", reply_markup=cancel_keyboard())

    else:
        try:
            name = message.text
            if name not in allowed_names:
                raise ValueError
        except ValueError:
            await message.reply(
                "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=names_keyboard(author_name)
            )
            return

        user_data = await state.get_data()
        people = set(user_data.get('people', []))
        people.add(name)
        await state.update_data(people=list(people))
        people_str = ', '.join(list(people))
        await message.answer(
            f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ <b>{people_str}</b>. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            parse_mode=types.ParseMode.HTML,
            reply_markup=names_keyboard(author_name)
        )


async def add_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    user_data = await state.get_data()
    count_users = len(user_data['people'])
    people_str = ", ".join(user_data['people'])
    amount_per_user = round(user_data['amount'] / count_users, 2)
    text = f"<u>–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å:</u>\n\n" \
           f"–°—É–º–º–∞: <b>{user_data['amount']}</b> –ª–∞—Ä–∏\n\n" \
           f"–ü–æ–¥–µ–ª–∏—Ç—å –Ω–∞ <b>{count_users}</b> —á–µ–ª–æ–≤–µ–∫:\n" \
           f"{people_str}\n\n" \
           f"–ü–æ <b>{amount_per_user}</b> –ª–∞—Ä–∏ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ\n\n" \
           f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n" \
           f"{user_data['comment']}"
    await message.answer(text, reply_markup=confirm_keyboard(), parse_mode=types.ParseMode.HTML)
    await state.set_state(SpendMoney.confirm.state)


async def save_result(message: types.Message, state: FSMContext):
    try:
        if message.text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            raise ValueError
    except ValueError:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=confirm_keyboard())
        return
    user_data = await state.get_data()
    save_transaction_to_db(message.from_user.username, user_data)
    save_history_db(message.from_user.username, user_data)
    # TODO add notification
    user_name = get_author_name(message.from_user.username)
    notify = f"üõéÔ∏è <b>{user_name}</b> —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"\
             f"<b>–°—É–º–º–∞:</b> {user_data['amount']} –ª–∞—Ä–∏\n"\
             f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n{', '.join(user_data['people'])}\n"\
             f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{user_data['comment']}\n\n"\
             f"–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–¥–∞—Ç—å ü´∂"
    await bot.send_message(
        text=notify,
        chat_id=-1001979839596,
        disable_notification=True,
        parse_mode=types.ParseMode.HTML
    )
    await state.finish()
    await message.answer("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_keyboard())


def register_state_handlers(dp: Dispatcher):
    dp.register_message_handler(
        cancel_handler,
        PrivateChatFilter(),
        content_types=['text'],
        text='‚ùå –û—Ç–º–µ–Ω–∞', state="*"
    )
    dp.register_message_handler(
        spend_money,
        PrivateChatFilter(),
        content_types=['text'],
        text='üí∏ –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—ã'
    )
    dp.register_message_handler(
        amount_of_money,
        PrivateChatFilter(),
        state=SpendMoney.amount
    )
    dp.register_message_handler(
        share_money_spend,
        PrivateChatFilter(),
        state=SpendMoney.people
    )
    dp.register_message_handler(
        add_comment,
        PrivateChatFilter(),
        state=SpendMoney.comment
    )
    dp.register_message_handler(
        save_result,
        PrivateChatFilter(),
        state=SpendMoney.confirm
    )
